{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","props","state","genreBroken","handleMainGenre","genresList","prefixList","suffixList","allGenres","i","genreJson","genres","length","standAlone","push","prefix","suffix","genreOptions","this","React","Component","Genre","handleSwitchClick","randomBaseGenre","render","current","button","num","Math","floor","random","numPre","numSuf","number","console","log","name","setState","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e6dc4c25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport genreJson from './genres.json'\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"\">\n      <header className=\"\">\n        {/* <h4>Want to Find some new Genres?</h4> */}\n        <Main />\n\n      </header>\n    </div>\n  );\n}\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      // genreOptions: genreJson.Genre,\n      genreBroken: [this.handleMainGenre()]\n    }\n  }\n  handleMainGenre() {\n    let genresList = [];\n    let prefixList = [];\n    let suffixList = [];\n    let allGenres = [];\n    for (let i = 0; i < genreJson.genres.length; i++) {\n      if (genreJson.genres[i].standAlone) {\n        genresList.push(genreJson.genres[i])\n      }\n      if (genreJson.genres[i].prefix) {\n        prefixList.push(genreJson.genres[i])\n      }\n      if (genreJson.genres[i].suffix) {\n        suffixList.push(genreJson.genres[i])\n      }\n    }\n    allGenres.push(genresList);\n    allGenres.push(prefixList);\n    allGenres.push(suffixList);\n    return allGenres;\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Genre genreOptions={this.state.genreBroken} />\n        {/* <div>{this.handleMainGenre()}</div> */}\n      </div>\n    );\n  }\n\n}\nclass Genre extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      allGenres: this.props.genreOptions[0],\n      current: \"Rock\",\n      button: true\n\n    }\n  }\n\n\n  handleSwitchClick = () => {\n    this.randomBaseGenre();\n    this.render();\n  }\n\n  randomBaseGenre() {\n    let num = Math.floor(Math.random() * this.state.allGenres[0].length)\n    let numPre = Math.floor(Math.random() * this.state.allGenres[1].length)\n    let numSuf = Math.floor(Math.random() * this.state.allGenres[2].length)\n\n    let number = Math.floor(Math.random() * 9)\n    console.log(num, numPre, numSuf, number);\n    console.log(this.state.allGenres[1].length - (numPre + 1) + \" \" + this.state.allGenres[0][num].name + \" \" + this.state.allGenres[2][numSuf].name\n    )\n    if (number === 0) {\n      this.setState({ current: this.state.allGenres[0][num].name });\n    } else if (number === 1 || number === 2) {\n      this.setState({ current: this.state.allGenres[1][numPre].name + \" \" + this.state.allGenres[0][num].name });\n\n    } else if (number === 3 || number === 4 || number === 5) {\n      // console.log(this.state.allGenres[0][num].name + \" \" + this.state.allGenres[2][numSuf].name);\n      this.setState({ current: this.state.allGenres[0][num].name + \" \" + this.state.allGenres[2][numSuf].name });\n\n    } else if (number === 6 || number === 7) {\n      this.setState({ current: this.state.allGenres[1][numPre].name + \" \" + this.state.allGenres[0][num].name + \" \" + this.state.allGenres[2][numSuf].name });\n\n    } else if (number === 8) {\n      this.setState({\n        current: this.state.allGenres[1][numPre].name + \" \" + this.state.allGenres[1][this.state.allGenres[1].length - (numPre + 1)].name + \" \" +\n          this.state.allGenres[0][num].name + \" \" + this.state.allGenres[2][numSuf].name\n      });\n    }\n  }\n  render() {\n\n    return (\n      <div className=\"body\">\n        {/* <div> */}\n          <h1 className=\"head\">\n            {this.state.current}\n          </h1>\n          <div className=\"buttonBig\">\n            <a className=\"mainButton\" onClick={this.handleSwitchClick} >Generate Random Genre</a>\n          </div>\n        </div>\n\n      // </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}